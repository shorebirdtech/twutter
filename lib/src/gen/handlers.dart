// Generated by `dart run shorebird generate`.
import 'dart:core';

import 'package:shorebird/datastore.dart';
import 'package:shorebird/handler.dart';
import 'package:twutter/src/backend/endpoint.dart';
import 'package:twutter/src/model/flap.dart';
import 'package:twutter/src/model/user.dart';

class PostFlapArgs {
  PostFlapArgs(this.draft);

  PostFlapArgs.fromJson(Map<String, dynamic> json)
      : draft = DraftFlap.fromJson(json['draft']);

  final DraftFlap draft;

  Map<String, dynamic> toJson() => {'draft': draft.toJson()};
}

class TimelineLatestFlapsSinceArgs {
  TimelineLatestFlapsSinceArgs({this.maxCount = 50});

  TimelineLatestFlapsSinceArgs.fromJson(Map<String, dynamic> json)
      : maxCount = json['maxCount'];

  final int maxCount;

  Map<String, dynamic> toJson() => {'maxCount': maxCount};
}

class UserByIdArgs {
  UserByIdArgs(this.userId);

  UserByIdArgs.fromJson(Map<String, dynamic> json)
      : userId = ObjectId.fromHexString(json['userId']);

  final ObjectId userId;

  Map<String, dynamic> toJson() => {'userId': userId.toHexString()};
}

class UserByUsernameArgs {
  UserByUsernameArgs(this.username);

  UserByUsernameArgs.fromJson(Map<String, dynamic> json)
      : username = json['username'];

  final String username;

  Map<String, dynamic> toJson() => {'username': username};
}

class LoginArgs {
  LoginArgs(this.request);

  LoginArgs.fromJson(Map<String, dynamic> json)
      : request = AuthRequest.fromJson(json['request']);

  final AuthRequest request;

  Map<String, dynamic> toJson() => {'request': request.toJson()};
}

List<Handler> allHandlers = <Handler>[
  Handler.simpleCall(
    '/postFlap',
    (
      context,
      json,
    ) async {
      final args = PostFlapArgs.fromJson(json);
      await postFlap(
        context,
        args.draft,
      );
      return Response.ok();
    },
  ),
  Handler.simpleCall(
    '/timelineLatestFlapsSince',
    (
      context,
      json,
    ) async {
      final args = TimelineLatestFlapsSinceArgs.fromJson(json);
      final result = await timelineLatestFlapsSince(
        context,
        maxCount: args.maxCount,
      );
      return Response.primitive(result.map((e) {
        return e.toJson();
      }).toList());
    },
  ),
  Handler.simpleCall(
    '/userById',
    (
      context,
      json,
    ) async {
      final args = UserByIdArgs.fromJson(json);
      final result = await userById(
        context,
        args.userId,
      );
      return Response.json(result.toJson());
    },
  ),
  Handler.simpleCall(
    '/userByUsername',
    (
      context,
      json,
    ) async {
      final args = UserByUsernameArgs.fromJson(json);
      final result = await userByUsername(
        context,
        args.username,
      );
      return Response.json(result.toJson());
    },
  ),
  Handler.simpleCall(
    '/login',
    (
      context,
      json,
    ) async {
      final args = LoginArgs.fromJson(json);
      final result = await login(
        context,
        args.request,
      );
      return Response.json(result.toJson());
    },
  ),
];
